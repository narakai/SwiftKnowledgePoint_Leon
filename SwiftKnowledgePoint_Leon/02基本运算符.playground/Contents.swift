//: Playground - noun: a place where people can play

import UIKit

//swift支持大部分的标准C语言的运算符，并且改进许多特性减少编码错误，比如=不返回值，还增加了..<和...表示区间
/*
 运算符分为一元、二元和三元运算符
 一元：对单一操作对象操作，分为前置和后置，前置运算符需要紧跟在操作对象之前，后置紧跟在对象之后
 二元：操作两个操作对象，出现于两个对象之间
 三元：操作三个对象，只有三目运算符
 操作数：受操作符影响的值叫操作数
 */

/***************赋值运算符****************/
let b = 10
var a = 5
a = b

//如果右边是一个元组，那么元组元素会被分解成多个常量或变量
let (x, y) = (1, 2)//x = 1, y = 2


/****************算术运算符***************/
//+-*/，默认情况下不允许数值运算中出现溢出的情况，但是可以使用溢出运算符来实现溢出运算
let c = a &+ b

//+可以用于String的拼接
let d = "Hello"+" "+"world"+"!"


/****************求余运算符***************/
9 % 4//1

//在对负数求余时，负数的符号会被忽略，意味着a % b == a % -b
9 % 4 == 9 % -4


/**************组合赋值运算符*****************/
//把其它运算符和赋值运算=组合起来
var e = 1
e += 1


/****************比较运算符***************/
//==、!=、>、<、>=、<=
//===和!==判断两个对象是否引用同一个对象实例

//当元组中的值可以比较时，那么该元组也是可以被比较的。比较的方式是从左到右，依次比较
(1, "z") < (2, "a")
(1, "a") > (1, "z")
(1, "a") == (1, "a")//标准库只能比较七个以内的元素


/***************三目运算符****************/
//问题 ？ 答案一 ： 答案二    成立，采用答案一，否则采用答案二


/*****************空合运算符**************/
//a ?? b，对a进行空判断，如果a包含一个值就进行解封，否则返回一个默认值b，a必须是可选类型，默认值b的类型必须要和a存储的类型保持一致
var color: UIColor?
let red = color ?? .black


/***************区间运算符****************/
//a...b：a到b所有值，包括ab
for index in 1...5 {
    print(index)
}

//a..<b:a到b所有值，不包括b
let names = ["Anna", "Alex", "Brian", "Jack"]
for i in 0..<names.count {
    print(names[i])
}


/****************逻辑运算符******************/
//!逻辑非运算符
//&&逻辑与，ab都为真，表达式为真
//||逻辑或，一个未真，表达式为真
//短路计算，一端成立后，就不会执行另一端
//&&和||都是左结合，意味着符合表达式优先计算左边表达式
//复杂的表达式，需要加上（）是逻辑更加清晰
